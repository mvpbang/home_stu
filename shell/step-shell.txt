$abc
${abc_aa}  --花括号限定变量的范围

--参数
$0      --脚本名字
$1 ..   --参数
$*      --参数列表
$@      --参数列表
$#      --参数个数

#!/bin/bash
echo "the sum $# file to list"
for file in $@
do
ls -l $file
done

expr 1 + 2

#!/bin/bash
num1=123
let num2=$num1+123
echo "$num1 = $num2"

数字比较
-eq  ==
-ne  !=
-ge  >=
-gt  >
-le  <=
-lt  <

字符比较
-z    -z str1  字符为空
-n    非空
 =    str1 = str2  相等
!=

文件
-b  块设备
-c  字符设备
-d  目录
-e  文件存在  exist
-f  常规文件
-h  链接文件
-p  管道文件
-s  文件大小0
-r  读
-w  写
-x  执行

多个表达式
!    非
-a   与
-o   或
exp
[ -f $@ -a -x $@ ]
&&   表达式的与
||   表达式的或
[-f $@] && [ -x $@ ]

#循环判断结构体
if []; then
fi

if []; then
elif
else
fi

for xxx in $@
do
done

while  xxx  --条件   先判断
do
done

until xx    --条件   先执行在判断
do
done


seq 10  --生成数字1--10

read xxx      ---等待用户输入，存放到变量xxx
echo "$xxx"
read          ---不带参数，默认存放到参数REPLY
echo "$REPLY"
read -t 6 -p "are you ok:" x   #限定6s不响应关闭
echo $x

程序退出
exit  0 正常退出，非0都是异常退出
$?  上一命令的执行状态，

命令组合执行，顺序
aa;bb    顺序执行
aa && bb aa执行成功，则执行bb
aa | bb  aa不成功，则执行bb













#符号详解
() 在子shell中运行
    (a=1);echo $a，结果是空，因为a=1不是在当前shell中运行的(a=1);(echo $a)也是空的。
    小技巧：(cd $path, do something) 可以让不切换当前目录而在其它目录干点别的事儿~
    () 还有个功能是数组的赋值：比如a=(1 3 5)，那么${a[0]}=1;${a[1]}=3;${a[2]}=5，需要注意的是，下标是从0开始的。

(()) 表达式计算
    a=1;((a++));echo $a，这时a就是2了。

<() 和 >() 进程代入，可以把命令的执行结果当成文件一样读入
    比如comm前一般需要sort，那就可以这样comm <(sort 1.lst) <(sort 2.lst)
    或者是paste <(cut -t2 file1) <(cut -t1 file1)，和管道差不多，但是支持多个输入。

$() $(cmd) 执行cmd的结果，
    比如cmd是echo ls，那么就是执行ls，比如file $(which bash)，which bash的结果是/bin/bash，
    所以file $(which bash)等于file /bin/bash。如果你$(ls)，而且你的当前目录下只有a b两个文件，
    那么就是执行a b，然后系统会提示，命令没找到。$() 基本和 `` 等价。

$(()) 表达式扩展，
    和(())很相似，但是这个是有点不同，$(())不能直接$((b++))，例如：b=1;echo $((++b))
    这时b等于2，显示的也是2，b=1; echo $((b++))这时b等于2，显示的是1.

[] 和 [[]]，[] 就是 test，[]和[[]]都是条件表达式，不过[[]]有比[]高的容错性，
    如果a为空，那么[ $a -eq 0 ]会报错，但是[[ $a -eq 0 ]]不会，所以一般都会使用[[]]或者是
    [ "$a" -eq 0 ]，[[]]支持的功能也比 [] 多，比如[[ aaa =~ a{3} ]]，[] 还有一种用途，
    如果你的当前目录下有a1-a9九个文件，你可以用a[1-9]来替代这九个文件。
    有点需要注意，你不能用a[1-20]来代替a1- a20，必须要a[1-9] a1[0-9] a20。
    但是需要注意的是 [[]] 数字进制转换的坑~

$[] 是 $(()) 的过去形式，现在已经不建议使用。

{n..m} {1..30} 就是1-30，或者是/{,s}bin/表示/bin/和/sbin/，ab{c,d,e}表示abc、abd、abe，
    小技巧：文件备份：cp a.sh{,.bak}
    而 { cmd1; cmd2; } 的作用是定义一个命令组，一般用在单行的条件表达式中：
    [[ 1 -eq 2 ]] && echo True || { echo False; echo "Program will exit！"; }
    其实 shell 函数的语法也是它的变体：
    a(){ i=$1; echo $((i++)); echo $((++i)); } && a 1

${} 变量的Parameter Expansion，
    用法很多，最基本的 ${var}1，防止变量扩展冲突，具体可以查看man bash

#bash 下的 split 取“数组”的首、尾
    ${file#*/}：拿掉第一条 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt
    ${file##*/}：拿掉最后一条 / 及其左边的字符串：my.file.txt
    ${file#*.}：拿掉第一个 .  及其左边的字符串：file.txt
    ${file##*.}：拿掉最后一个 .  及其左边的字符串：txt
    ${file%/*}：拿掉最后条 / 及其右边的字符串：/dir1/dir2/dir3
    ${file%%/*}：拿掉第一条 / 及其右边的字符串：(空值)
    ${file%.*}：拿掉最后一个 .  及其右边的字符串：/dir1/dir2/dir3/my.file
    ${file%%.*}：拿掉第一个 .  及其右边的字符串：/dir1/dir2/dir3/my
    #tip
    # 是去掉左边(在键盘上 # 在 $ 之左边)
    % 是去掉右边(在键盘上 % 在 $ 之右边)
    单一符号是最小匹配﹔两个符号是最大匹配（类似贪婪匹配）

    #bash 下的 substring 按字符位置、长度截取
    ${file:0:5}：提取最左边的 5 个字节：/dir1
    ${file:5:5}：提取第 5 个字节右边的连续 5 个字节：/dir2
    ${#file}：计算出字符串的长度，/dir1/dir2/dir3/my.file.txt 字符串长度 27
    ${file: -4}：提取最后四个字符串（注意不同于echo ${file:-4}），类似用法（提取前四个字符） ${file:0:4}

    #bash/replace replaceall
    ${file/dir/path}：将第一个 dir 提换为 path：/path1/dir2/dir3/my.file.txt
    ${file//dir/path}：将全部 dir 提换为 path：/path1/path2/path3/my.file.txt
